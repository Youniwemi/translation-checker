#!/usr/bin/env php
<?php
declare(strict_types=1);

if (!isset($_composer_autoload_path)) {
    require __DIR__ . "/../vendor/autoload.php";
} else {
    require $_composer_autoload_path;
}

use Youniwemi\TranslationChecker\FrenchGuidelinesChecker;
use Youniwemi\TranslationChecker\Translator;
use Youniwemi\TranslationChecker\TranslationEngine;

$options = getopt("", [
    "help",
    "fix",
    "quiet",
    "translate",
    "no-warnings",
    "interactive",
]);
$args = array_values(
    array_filter($argv, fn($arg) => !str_starts_with($arg, "-"))
);
array_shift($args); // Remove script name

if (isset($options["help"]) || empty($args)) {
    echo <<<HELP
Usage: check-translation [--fix] [--quiet] [--translate] [--no-warnings] [--interactive] <file.po> [<file2.po> ...]
Check typography and translate PO files. Language is auto-detected from filename (e.g., plugin-de.po â†’ German)

Supported Languages:
  French (fr)     - Full typography checking + translation
  German (de)     - Translation only
  Spanish (es)    - Translation only
  Italian (it)    - Translation only
  Portuguese (pt) - Translation only
  Dutch (nl)      - Translation only

Options:
  --fix         Fix the issues and save changes back to the file
  --quiet       Only show errors and warnings (no progress info)
  --no-warnings Only show errors (ignore warnings)
  --translate   Translate new strings if not translated yet ( Please SET OPENAI_API_KEY, OPENAI_API_URL, and OPENAI_MODEL environment variables)
  --interactive Ask for confirmation before applying each translation
  --help        Show this help message

Examples:
  check-translation plugin-fr.po                                      # Check French typography
  check-translation --fix --translate plugin-de.po                    # Translate to German
  check-translation --fix --translate --interactive plugin-es.po      # Interactive Spanish translation
  check-translation --quiet --fix *.po                                # Process all PO files

HELP;
    exit(0);
}

$translate = isset($options["translate"]);

if ($translate) {
    $apiKey = getenv("OPENAI_API_KEY");
    $apiUrl = getenv("OPENAI_API_URL");
    $model = getenv("OPENAI_MODEL") ?: "gpt-3.5-turbo";
    if (empty($apiKey) && empty($apiUrl)) {
        fwrite(
            STDERR,
            "Error: OPENAI_API_KEY, OPENAI_API_URL, and OPENAI_MODEL environment variables are not set. Please set them before running the script." .
                PHP_EOL
        );
        exit(1);
    }
    try {
        $engine = TranslationEngine::openai($apiKey, $model, $apiUrl);
    } catch (\Exception $e) {
        fwrite(
            STDERR,
            "Error: Engine creation failed - " . $e->getMessage() . PHP_EOL
        );
        exit(1);
    }
    
    $translator = new Translator($engine, isset($options["interactive"]));

    $checker = new FrenchGuidelinesChecker($translator);
} else {
    $checker = new FrenchGuidelinesChecker();
}

$hasErrors = false;
$quiet = isset($options["quiet"]);

foreach ($args as $file) {
    if (!file_exists($file)) {
        fwrite(STDERR, "Error: File not found: $file" . PHP_EOL);
        $hasErrors = true;
        continue;
    }

    if (!is_readable($file)) {
        fwrite(STDERR, "Error: Cannot read file: $file" . PHP_EOL);
        $hasErrors = true;
        continue;
    }

    if (isset($options["fix"]) && !is_writable($file)) {
        fwrite(STDERR, "Error: Cannot write to file: $file" . PHP_EOL);
        $hasErrors = true;
        continue;
    }

    try {
        // Detect language from filename
        $targetLang = $checker->detectLanguageFromFilename($file) ?? "fr";

        $content = file_get_contents($file);
        $result = $checker->check(
            $content,
            isset($options["fix"]),
            $translate,
            $targetLang
        );

        if (!$quiet) {
            $langName = Translator::getLanguageName($targetLang);
            echo "Checking $file (Language: $langName)..." . PHP_EOL;
        }

        $hasIssues = false;
        if (!empty($result["errors"])) {
            $hasErrors = true;
            $hasIssues = true;
            foreach ($result["errors"] as $error) {
                echo "ERROR: $error" . PHP_EOL;
            }
        }

        if (!empty($result["warnings"]) && !isset($options["no-warnings"])) {
            $hasIssues = true;
            foreach ($result["warnings"] as $warning) {
                echo "WARNING: $warning" . PHP_EOL;
            }
        }

        if (!$hasIssues && !$quiet) {
            echo "No issues found in $file" . PHP_EOL;
        }

        if (isset($options["fix"]) && isset($result["fixed_content"])) {
            if (!$quiet) {
                echo "Fixing $file..." . PHP_EOL;
            }
            // save file
            rename($file, $file . ".bak");
            file_put_contents($file, $result["fixed_content"]);
            if (!$quiet) {
                echo "Fixed $file" . PHP_EOL;
            }
        }
    } catch (Throwable $e) {
        fwrite(STDERR, "Error processing $file: " . $e->getMessage() . PHP_EOL);
        $hasErrors = true;
    }
}

exit($hasErrors ? 1 : 0);

